
# Projet IFT3150: Chatbot Dans L'outil Planificateur

> **Th√®mes**: NLP, Science de donn√©es, G√©nie logiciel  
> **Superviseur**: Louis-Edouard LAFONTANT 


## Informations importantes

!!! info "Dates importantes"
    - **Description du projet** : 16 mai 2025
    - **Foire 1: Prototypage** : 9-13 juin 2025
    - **Foire 2: Version beta** : 14-18 juillet 2025
    - **Pr√©sentation et rapport** : 11-15 ao√ªt 2025

## √âquipe

- Haoran Sun


## Description du projet

### Contexte

Le Planificateur acad√©mique est un outil web d√©velopp√© au D√©partement d‚Äôinformatique et de recherche op√©rationnelle (DIRO) de l‚ÄôUniversit√© de Montr√©al. Il vise √† accompagner les √©tudiants dans la planification de leur parcours universitaire en leur permettant de s√©lectionner des cours, visualiser la structure des programmes, d√©tecter les conflits d‚Äôhoraire et valider leur cheminement selon les exigences acad√©miques. 

L‚Äôoutil offre une interface intuitive pour consulter les horaires des cours, enseignants et salles, ainsi que pour explorer les cours pr√©alables. Il repose sur une infrastructure moderne incluant une base de donn√©es MongoDB, une API en FastAPI et une interface en React.

### Probl√©matique ou motivations
Face √† une offre de cours vaste et parfois floue, il devient difficile pour les √©tudiants de comprendre √† quelle orientation appartient chaque cours, quels pr√©alables sont requis ou encore comment optimiser leur cheminement selon leurs int√©r√™ts ou contraintes personnelles. Les √©tudiants doivent souvent naviguer entre plusieurs ressources pour v√©rifier manuellement la conformit√© de leur s√©lection de cours avec les exigences du programme.

Pour r√©pondre √† cette probl√©matique, le projet vise √† int√©grer un agent conversationnel intelligent ‚Äî un chatbot s'inspirant des mod√®les LLM (Large Language Models). Contrairement √† un simple syst√®me de filtrage ou de recherche classique, ce chatbot permettra une interaction naturelle avec l‚Äô√©tudiant, en comprenant ses objectifs (par exemple : se sp√©cialiser en IA, √©viter les conflits d‚Äôhoraire, atteindre un double objectif majeur/mineur) et en lui sugg√©rant dynamiquement des parcours coh√©rents, adapt√©s et personnalis√©s. L‚Äôobjectif est de rendre la planification plus accessible, plus efficace et mieux align√©e sur les aspirations acad√©miques de chaque √©tudiant.

### Proposition et objectifs

Ce projet propose d‚Äôenrichir le planificateur acad√©mique existant par l‚Äôint√©gration d‚Äôun module conversationnel intelligent, capable d‚Äôinteragir naturellement avec l‚Äô√©tudiant et de l‚Äôaccompagner dans ses choix de cours. Inspir√© des technologies de mod√®les de langage √† grande √©chelle (LLM), ce chatbot vise √† aller au-del√† des filtres classiques en analysant le contexte, les objectifs, et les pr√©f√©rences exprim√©es en langage naturel.

Les objectifs principaux de cette proposition sont :

- Offrir une exp√©rience utilisateur plus intuitive et personnalis√©e pour la planification de cheminements
- R√©duire la charge cognitive li√©e √† la compr√©hension des structures de programme et des pr√©alables
- Permettre un dialogue interactif pour guider l‚Äô√©tudiant vers des parcours compatibles avec ses int√©r√™ts et contraintes
- Automatiser les recommandations de cours selon diff√©rents sc√©narios acad√©miques (sp√©cialisation, double programme, √©quilibre charge horaire, etc.)

Ce module intelligent permettra de transformer l‚Äôoutil en v√©ritable assistant p√©dagogique, rendant la planification acad√©mique plus accessible, efficace et adapt√©e √† chaque profil √©tudiant.

### Impl√©mentation technique envisag√©e

Le module chatbot sera int√©gr√© √† l‚Äôapplication existante selon une architecture modulaire : le front-end React accueillera un composant ChatBot.js dans /app/, tandis que le back-end FastAPI ajoutera une route d√©di√©e dans /api/chat.py. Les √©changes se feront via une API REST, en envoyant les messages utilisateur enrichis d‚Äôun identifiant de session.

Le serveur analysera les messages avec spaCy pour extraire les intentions (ex. : domaine d‚Äôint√©r√™t, contraintes horaires), puis appliquera des r√®gles d√©finies dans /utils/ pour recommander des cours pertinents. L‚Äôhistorique des conversations sera conserv√© temporairement en m√©moire (par session).

Cette architecture permet une interaction fluide entre l‚Äô√©tudiant et le syst√®me, en prenant en compte ses pr√©f√©rences, son profil acad√©mique et les contraintes du programme pour formuler des recommandations cibl√©es.


## √âch√©ancier

!!! info
    Le suivi complet est disponible dans la page [Suivi de projet](suivi.md).

| Jalon (*Milestone*)            | Date pr√©vue   | Livrable                            | Statut      |
|--------------------------------|---------------|-------------------------------------|-------------|
| Ouverture de projet            | 1 mai         | Proposition de projet               | ‚úÖ Termin√©  |
| Analyse des exigences          | 16 mai        | Document d'analyse                  | üîÑ En cours |
| Mod√®le de donne√©s1             | 23 mai        | Diagramme UML ou entit√©-association | ‚è≥ √Ä venir  |
| Mod√®le de donne√©s2             | 30 mai        | Diagramme UML ou mod√®le C4          | ‚è≥ √Ä venir  |
| Architecture                   | 6 juin        | Diagramme UML ou mod√®le C4          | ‚è≥ √Ä venir  |
| Revue de conception            | 13 juin       | Feedback encadrant + ajustements    | ‚è≥ √Ä venir  |
| Impl√©mentation v1              | 20 juin       | Application v1                      | ‚è≥ √Ä venir  |
| Impl√©mentation v2 + tests      | 11 juillet    | Application v2 + Tests              | ‚è≥ √Ä venir  |
| Impl√©mentation v3              | 1er ao√ªt      | Version finale                      | ‚è≥ √Ä venir  |
| Tests                          | 11-31 juillet | Plan + R√©sultats interm√©diaires     | ‚è≥ √Ä venir  |
| √âvaluation finale              | 8 ao√ªt        | Analyse des r√©sultats + Discussion  | ‚è≥ √Ä venir  |
| Pr√©sentation + Rapport         | 15 ao√ªt       | Pr√©sentation + Rapport              | ‚è≥ √Ä venir  |


# √âtudes pr√©liminaires

## Analyse du probl√®me

Lorsqu'ils planifient leur parcours acad√©mique, les √©tudiants se retrouvent souvent confront√©s √† une offre de cours vaste et peu structur√©e, rendant difficile le choix des cours adapt√©s √† leurs objectifs acad√©miques. En l'absence d'un syst√®me de recommandation intelligent, ils doivent naviguer manuellement √† travers les programmes pour identifier les cours correspondant √† leur domaine d'int√©r√™t, respecter les pr√©alables et s'assurer de l'alignement avec les exigences de cr√©dits.

Cette d√©marche, non seulement chronophage, peut √©galement entra√Æner des choix non optimis√©s, surtout pour les √©tudiants souhaitant se sp√©cialiser dans des domaines pr√©cis (IA, syst√®mes, d√©veloppement web). Un module de recommandation interactif, bas√© sur l‚Äôanalyse des pr√©f√©rences acad√©miques et des ant√©c√©dents de cours suivis, permettrait d‚Äôorienter efficacement les √©tudiants vers les cours les plus pertinents.

## Exigences

### Fonctionnelles :

- Saisie des informations :
- - Permettre √† l‚Äô√©tudiant de saisir les cours d√©j√† suivis (peu importe le format de saisie initialement).
- - Permettre √† l‚Äô√©tudiant de sp√©cifier son domaine d‚Äôint√©r√™t (IA, D√©veloppement Web, Syst√®mes, etc.).
- - Calculer automatiquement le nombre de cr√©dits restants, en distinguant les cr√©dits obligatoires et optionnels.
- G√©n√©ration de combinaisons de cours :
- - G√©n√©rer des combinaisons de cours pour chaque trimestre en tenant compte :
- - - Des cr√©dits restants √† valider.
- - - Des cours obligatoires et optionnels disponibles.
- - - Des disponibilit√©s de cours (ex. : hiver, √©t√©, automne).
- - - Des pr√©alables requis pour certains cours.
- Gestion des conflits horaires :
- - V√©rifier les conflits d‚Äôhoraires entre les cours s√©lectionn√©s pour un m√™me trimestre.
- - √âviter de recommander des cours ayant des horaires qui se chevauchent.
- Remplissage automatique des trimestres :
- - Remplir automatiquement chaque trimestre avec les cours recommand√©s (maximum 4 cours par trimestre).
- - Permettre √† l‚Äô√©tudiant de d√©placer ou supprimer des cours recommand√©s.
- Personnalisation des recommandations :
- - Adapter les recommandations de cours en fonction :
- - - Du domaine d‚Äôint√©r√™t s√©lectionn√©.
- - - Des pr√©alables d√©j√† valid√©s.
- - - -Des cours en cours ou pr√©vus pour un trimestre donn√©.
- Affichage des cr√©dits :
- - Mettre √† jour le nombre de cr√©dits pour chaque trimestre en temps r√©el en fonction des cours ajout√©s ou supprim√©s.

### Non fonctionnelles :

- Performance :
- - Le calcul des recommandations doit √™tre effectu√© en moins de 2 secondes.
- - L‚Äôinterface doit √™tre r√©active, sans latence visible lors du remplissage des trimestres.
- Compatibilit√© :
- - Compatible avec les navigateurs r√©cents (Chrome, Firefox, Edge).
- - Responsive : affichage optimis√© pour les √©crans desktop et tablette.
- S√©curit√© :
- - Les donn√©es saisies par l‚Äô√©tudiant (cours suivis, pr√©f√©rences) doivent √™tre conserv√©es de mani√®re s√©curis√©e.
- - Les recommandations de cours ne doivent pas divulguer des informations personnelles ou des donn√©es sensibles.
- Extensibilit√© :
- - Le syst√®me doit permettre l‚Äôajout futur de nouveaux programmes, cours ou modules sans refonte majeure de l‚Äôarchitecture.
- - L‚Äôalgorithme de recommandation doit √™tre facilement configurable pour int√©grer de nouvelles r√®gles (ex. : pr√©alables suppl√©mentaires, nouveaux domaines d‚Äôint√©r√™t).
- Maintenabilit√© :
- - Le code source doit √™tre bien structur√© et document√© pour permettre des mises √† jour ult√©rieures.
- - Les modules d‚Äôalgorithmes de recommandation doivent √™tre ind√©pendants et testables.


## Recherche de solutions


## M√©thodologie

La m√©thodologie adopt√©e s'appuie sur l'infrastructure existante du planificateur acad√©mique et l‚Äôint√©gration directe des donn√©es d‚Äôinscription des √©tudiants issues de Studium. Le processus se d√©cline en trois √©tapes :

### Exploitation des donn√©es existantes
- Acc√©der aux donn√©es d‚Äôinscription des √©tudiants via les enregistrements disponibles dans Studium, incluant les cours suivis, les pr√©alables valid√©s et les cr√©dits accumul√©s.
- Structurer ces informations dans MongoDB pour permettre un acc√®s rapide aux ant√©c√©dents acad√©miques des √©tudiants, facilitant ainsi l‚Äôalignement des recommandations sur le parcours r√©el de l‚Äôutilisateur.
- Cr√©er des index pour optimiser les requ√™tes fr√©quentes, telles que les cours manquants dans un domaine ou les cr√©dits restants √† valider.

### D√©veloppement du module chatbot 
- Int√©grer un composant React (ChatBot.js) offrant une interface conversationnelle intuitive, permettant √† l‚Äô√©tudiant de formuler des demandes en langage naturel.
- Cr√©er une route API /chat avec FastAPI pour :
- - Analyser les intentions utilisateur (ex. : sp√©cialisation en IA, cours optionnels, validation des pr√©alables) √† l‚Äôaide de spaCy.
- - Interroger la base de donn√©es MongoDB pour obtenir des suggestions bas√©es sur l‚Äôhistorique d‚Äôinscription et les segments acad√©miques pertinents.
- - G√©rer la persistance du contexte de conversation, afin de fournir des r√©ponses coh√©rentes et adapt√©es aux questions successives.

### Validation et tests

- Effectuer des tests fonctionnels pour v√©rifier la coh√©rence des recommandations, notamment dans des sc√©narios complexes tels que le double programme ou les cours avec plusieurs pr√©requis.
- Impl√©menter des cas de test bas√©s sur des profils acad√©miques types pour √©valuer la pr√©cision des suggestions.
- Recueillir les retours d‚Äôexp√©rience des utilisateurs afin de calibrer le module chatbot et affiner les r√®gles de recommandation.
